package backend.airo.domain.user;

import backend.airo.persistence.user.entity.ProviderType;
import backend.airo.persistence.user.entity.UserEntity;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.time.LocalDate;
import java.time.LocalDateTime;

@Getter
@RequiredArgsConstructor
public class User {
    private final Long id;  // ID만 final (변경되면 안 됨)
    private String email;   // 변경 가능
    private String name;    // 변경 가능
    private String nickname; // 변경 가능
    private String phoneNumber; // 변경 가능
    private LocalDate birthDate; // 변경 가능
    private final ProviderType providerType; // 한번 설정되면 변경되면 안 됨
    private final String providerId; // 한번 설정되면 변경되면 안 됨
    private LocalDateTime lastLoginAt; // 변경 가능
    private LocalDateTime createdAt;   // 변경 가능



    public User(Long id, String email, String name, String nickname, String phoneNumber, LocalDate birthDate, ProviderType providerType, String providerId) {
        this.id = id; // ID will be generated by the database
        this.email = email;
        this.name = name;
        this.nickname = nickname;
        this.phoneNumber = phoneNumber;
        this.birthDate = birthDate;
        this.providerType = providerType;
        this.providerId = providerId;
    }

    public User(String email, String name, ProviderType providerType, String providerId) {
        this.id = null; // ID will be generated by the database
        this.email = email;
        this.name = name;
        this.providerType = providerType;
        this.providerId = providerId;
    }


    public static User createNewUser(String email, String name, ProviderType providerType, String providerId) {
        return new User(
                email,
                name != null ? name : email, // name이 null이면 email을 nickname으로 사용
                providerType,
                providerId
        );
    }

    // User.java에 추가할 메서드
    public void updateUserInfo(String email, String nickname) {

        // 이메일 업데이트
        if (email != null && !email.trim().isEmpty() && !email.equals(this.email)) {
            String oldEmail = this.email;
            this.email = email;
        }

        // 닉네임 업데이트
        if (nickname != null && !nickname.trim().isEmpty() && !nickname.equals(this.nickname)) {
            String oldNickname = this.nickname;
            this.nickname = nickname;
        }

    }
}
